var documenterSearchIndex = {"docs":
[{"location":"#Ercot-Magic-Documentation","page":"-","title":"Ercot Magic Documentation","text":"","category":"section"},{"location":"","page":"-","title":"-","text":"This is the documentation for the Ercot Magic package.","category":"page"},{"location":"","page":"-","title":"-","text":"CurrentModule = ErcotMagic","category":"page"},{"location":"","page":"-","title":"-","text":"Modules = [ErcotMagic]","category":"page"},{"location":"#ErcotMagic.ercot_api_call-Tuple{Any, Any}","page":"-","title":"ErcotMagic.ercot_api_call","text":"Base call to ERCOT API\n\nauthorization => token_bearer\nheaders => Ocp-Apim-Subscription-Key => ENV[\"ERCOTKEY\"]\nurl => https://api.ercot.com/api/public-reports/np3-966-er/60damenergyonlyoffers\n\nsixtydamenergyonlyoffers = \"https://api.ercot.com/api/public-reports/np3-966-er/60damenergyonlyoffers\" response = ercotapicall(token[\"idtoken\"], sixtydamenergyonly_offers)\n\n\n\n\n\n","category":"method"},{"location":"#ErcotMagic.ercot_api_url-Tuple{Any, Any}","page":"-","title":"ErcotMagic.ercot_api_url","text":"Function to formulate a url for ERCOT API based on params in kwargs\n\nparams = Dict(\"deliveryDateFrom\" => \"2021-08-01\", \"deliveryDateTo\" => \"2024-02-25\") params2 = Dict(\"settlementPointName\" => \"HBNORTH\") url = ercotapi_url(params)\n\ntry to cal\n\nresponse = ercotapicall(token[\"id_token\"], url)\n\nDAM prices\n\ndampricesurl = ercotapiurl(params, daprices) response = ercotapicall(token[\"idtoken\"], dampricesurl)\n\nRT prices\n\nrtpricesurl = ercotapiurl(params, rtprices) response = ercotapicall(token[\"idtoken\"], rtpricesurl)\n\nTwo day AS\n\ntwodayasurl = ercotapiurl(params, twodayAS) response = ercotapicall(token[\"id_token\"], twodayasurl)\n\nSixty DAM awards\n\nparams = Dict(\"deliveryDateFrom\" => \"2021-08-01\", \"deliveryDateTo\" => \"2024-02-25\") sixtydamawardsurl = ercotapiurl(params, sixtydamawards) response = ercotapicall(token[\"idtoken\"], sixtydamawards_url)\n\n\n\n\n\n","category":"method"},{"location":"#ErcotMagic.get_auth_token-Tuple{}","page":"-","title":"ErcotMagic.get_auth_token","text":"A function to retreive the auth token\n\ntoken = getauthtoken()\n\n\n\n\n\n","category":"method"},{"location":"#ErcotMagic.get_ercot_data-Tuple{Any, Any}","page":"-","title":"ErcotMagic.get_ercot_data","text":"Mega function to get the data from ERCOT API\n\nExamples: params = Dict(\"deliveryDateFrom\" => \"2024-02-01\", \"deliveryDateTo\" => \"2024-02-25\") dadat = getercotdata(params, daprices)\n\nReal Time Prices for every five minutes\n\nparams = Dict(\"RTDTimestampFrom\" => \"2024-02-01T00:00:00\",                  \"RTDTimestampTo\" => \"2024-02-01T01:00:00\",                 \"settlementPoint\" => \"HBNORTH\") rtdat = getercotdata(params, rt_prices)\n\nLoad Forecast\n\nparams = Dict(\"deliveryDateFrom\" => \"2024-02-01\", \"deliveryDateTo\" => \"2024-02-25\") lfdat = getercotdata(params, ercotload_forecast)\n\nZone Load Forecast\n\nparams = Dict(\"deliveryDateFrom\" => \"2024-02-21\", \"deliveryDateTo\" => \"2024-02-25\") lfdat = getercotdata(params, ercotzoneloadforecast)\n\nSolar System Forecast\n\nparams = Dict(\"deliveryDateFrom\" => \"2024-02-21\") lfdat = getercotdata(params, solarsystem_forecast)\n\nWind System Forecast\n\nparams = Dict(\"deliveryDateFrom\" => \"2024-03-21\") lfdat = getercotdata(params, windsystem_forecast)\n\n\n\n\n\n","category":"method"},{"location":"#ErcotMagic.parse_ercot_response-Tuple{Any}","page":"-","title":"ErcotMagic.parse_ercot_response","text":"Takes a response object and returns a DataFrame\n\nparams = Dict(\"deliveryDateFrom\" => \"2024-02-01\", \"deliveryDateTo\" => \"2024-02-25\")\n\ndadat = parseercotresponse(ercotapicall(token[\"idtoken\"], ercotapiurl(params, da_prices)))\n\n#Note: RTD LMP includes all adders params = Dict(\"RTDTimestampFrom\" => \"2024-02-01T00:00:00\", \"RTDTimestampTo\" => \"2024-02-01T01:00:00\") rtdat = parseercotresponse(ercotapicall(token[\"idtoken\"], ercotapiurl(params, rt_prices)))\n\n\n\n\n\n","category":"method"}]
}
